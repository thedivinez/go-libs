// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: quicksoccer.proto

package quicksoccer

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuickSoccerClient is the client API for QuickSoccer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuickSoccerClient interface {
	PlaceBet(ctx context.Context, in *Bet, opts ...grpc.CallOption) (*BetUpdateResponse, error)
	GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*Match, error)
	UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*AddTeamResponse, error)
	AddTeam(ctx context.Context, in *AddTeamRequest, opts ...grpc.CallOption) (*AddTeamResponse, error)
	GetBets(ctx context.Context, in *GetBetsRequest, opts ...grpc.CallOption) (*GetBetsResponse, error)
	DeleteBet(ctx context.Context, in *DeleteBetRequest, opts ...grpc.CallOption) (*BetUpdateResponse, error)
	AddLeague(ctx context.Context, in *AddLeagueRequest, opts ...grpc.CallOption) (*AddLeagueResponse, error)
	UpdateBet(ctx context.Context, in *UpdateBetRequest, opts ...grpc.CallOption) (*BetUpdateResponse, error)
	GetTeams(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTeamsResponse, error)
	GetMatches(ctx context.Context, in *GetMatchesRequest, opts ...grpc.CallOption) (*GetMatchesResponse, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	AddOutcomes(ctx context.Context, in *AddOutcomesRequest, opts ...grpc.CallOption) (*AddOutcomesResponse, error)
	GetLeagues(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLeaguesResponse, error)
	DeleteLeague(ctx context.Context, in *DeleteLeagueRequest, opts ...grpc.CallOption) (*DeleteLeagueResponse, error)
	SubscribeSoccer(ctx context.Context, in *SubscribeSoccerRequest, opts ...grpc.CallOption) (*SubscribeSoccerResponse, error)
	GetSoccerSettings(ctx context.Context, in *GetSoccerSettingsRequest, opts ...grpc.CallOption) (*QuickSoccerAdmin, error)
	UpdateSoccerSettings(ctx context.Context, in *QuickSoccerAdmin, opts ...grpc.CallOption) (*UpdateSoccerSettingsResponse, error)
}

type quickSoccerClient struct {
	cc grpc.ClientConnInterface
}

func NewQuickSoccerClient(cc grpc.ClientConnInterface) QuickSoccerClient {
	return &quickSoccerClient{cc}
}

func (c *quickSoccerClient) PlaceBet(ctx context.Context, in *Bet, opts ...grpc.CallOption) (*BetUpdateResponse, error) {
	out := new(BetUpdateResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/PlaceBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*Match, error) {
	out := new(Match)
	err := c.cc.Invoke(ctx, "/QuickSoccer/GetMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*AddTeamResponse, error) {
	out := new(AddTeamResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) AddTeam(ctx context.Context, in *AddTeamRequest, opts ...grpc.CallOption) (*AddTeamResponse, error) {
	out := new(AddTeamResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/AddTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) GetBets(ctx context.Context, in *GetBetsRequest, opts ...grpc.CallOption) (*GetBetsResponse, error) {
	out := new(GetBetsResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/GetBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) DeleteBet(ctx context.Context, in *DeleteBetRequest, opts ...grpc.CallOption) (*BetUpdateResponse, error) {
	out := new(BetUpdateResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/DeleteBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) AddLeague(ctx context.Context, in *AddLeagueRequest, opts ...grpc.CallOption) (*AddLeagueResponse, error) {
	out := new(AddLeagueResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/AddLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) UpdateBet(ctx context.Context, in *UpdateBetRequest, opts ...grpc.CallOption) (*BetUpdateResponse, error) {
	out := new(BetUpdateResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/UpdateBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) GetTeams(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTeamsResponse, error) {
	out := new(GetTeamsResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/GetTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) GetMatches(ctx context.Context, in *GetMatchesRequest, opts ...grpc.CallOption) (*GetMatchesResponse, error) {
	out := new(GetMatchesResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/GetMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) AddOutcomes(ctx context.Context, in *AddOutcomesRequest, opts ...grpc.CallOption) (*AddOutcomesResponse, error) {
	out := new(AddOutcomesResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/AddOutcomes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) GetLeagues(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLeaguesResponse, error) {
	out := new(GetLeaguesResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/GetLeagues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) DeleteLeague(ctx context.Context, in *DeleteLeagueRequest, opts ...grpc.CallOption) (*DeleteLeagueResponse, error) {
	out := new(DeleteLeagueResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/DeleteLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) SubscribeSoccer(ctx context.Context, in *SubscribeSoccerRequest, opts ...grpc.CallOption) (*SubscribeSoccerResponse, error) {
	out := new(SubscribeSoccerResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/SubscribeSoccer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) GetSoccerSettings(ctx context.Context, in *GetSoccerSettingsRequest, opts ...grpc.CallOption) (*QuickSoccerAdmin, error) {
	out := new(QuickSoccerAdmin)
	err := c.cc.Invoke(ctx, "/QuickSoccer/GetSoccerSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickSoccerClient) UpdateSoccerSettings(ctx context.Context, in *QuickSoccerAdmin, opts ...grpc.CallOption) (*UpdateSoccerSettingsResponse, error) {
	out := new(UpdateSoccerSettingsResponse)
	err := c.cc.Invoke(ctx, "/QuickSoccer/UpdateSoccerSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuickSoccerServer is the server API for QuickSoccer service.
// All implementations should embed UnimplementedQuickSoccerServer
// for forward compatibility
type QuickSoccerServer interface {
	PlaceBet(context.Context, *Bet) (*BetUpdateResponse, error)
	GetMatch(context.Context, *GetMatchRequest) (*Match, error)
	UpdateTeam(context.Context, *Team) (*AddTeamResponse, error)
	AddTeam(context.Context, *AddTeamRequest) (*AddTeamResponse, error)
	GetBets(context.Context, *GetBetsRequest) (*GetBetsResponse, error)
	DeleteBet(context.Context, *DeleteBetRequest) (*BetUpdateResponse, error)
	AddLeague(context.Context, *AddLeagueRequest) (*AddLeagueResponse, error)
	UpdateBet(context.Context, *UpdateBetRequest) (*BetUpdateResponse, error)
	GetTeams(context.Context, *empty.Empty) (*GetTeamsResponse, error)
	GetMatches(context.Context, *GetMatchesRequest) (*GetMatchesResponse, error)
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	AddOutcomes(context.Context, *AddOutcomesRequest) (*AddOutcomesResponse, error)
	GetLeagues(context.Context, *empty.Empty) (*GetLeaguesResponse, error)
	DeleteLeague(context.Context, *DeleteLeagueRequest) (*DeleteLeagueResponse, error)
	SubscribeSoccer(context.Context, *SubscribeSoccerRequest) (*SubscribeSoccerResponse, error)
	GetSoccerSettings(context.Context, *GetSoccerSettingsRequest) (*QuickSoccerAdmin, error)
	UpdateSoccerSettings(context.Context, *QuickSoccerAdmin) (*UpdateSoccerSettingsResponse, error)
}

// UnimplementedQuickSoccerServer should be embedded to have forward compatible implementations.
type UnimplementedQuickSoccerServer struct {
}

func (UnimplementedQuickSoccerServer) PlaceBet(context.Context, *Bet) (*BetUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBet not implemented")
}
func (UnimplementedQuickSoccerServer) GetMatch(context.Context, *GetMatchRequest) (*Match, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatch not implemented")
}
func (UnimplementedQuickSoccerServer) UpdateTeam(context.Context, *Team) (*AddTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedQuickSoccerServer) AddTeam(context.Context, *AddTeamRequest) (*AddTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeam not implemented")
}
func (UnimplementedQuickSoccerServer) GetBets(context.Context, *GetBetsRequest) (*GetBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBets not implemented")
}
func (UnimplementedQuickSoccerServer) DeleteBet(context.Context, *DeleteBetRequest) (*BetUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBet not implemented")
}
func (UnimplementedQuickSoccerServer) AddLeague(context.Context, *AddLeagueRequest) (*AddLeagueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLeague not implemented")
}
func (UnimplementedQuickSoccerServer) UpdateBet(context.Context, *UpdateBetRequest) (*BetUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBet not implemented")
}
func (UnimplementedQuickSoccerServer) GetTeams(context.Context, *empty.Empty) (*GetTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (UnimplementedQuickSoccerServer) GetMatches(context.Context, *GetMatchesRequest) (*GetMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatches not implemented")
}
func (UnimplementedQuickSoccerServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedQuickSoccerServer) AddOutcomes(context.Context, *AddOutcomesRequest) (*AddOutcomesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOutcomes not implemented")
}
func (UnimplementedQuickSoccerServer) GetLeagues(context.Context, *empty.Empty) (*GetLeaguesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeagues not implemented")
}
func (UnimplementedQuickSoccerServer) DeleteLeague(context.Context, *DeleteLeagueRequest) (*DeleteLeagueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeague not implemented")
}
func (UnimplementedQuickSoccerServer) SubscribeSoccer(context.Context, *SubscribeSoccerRequest) (*SubscribeSoccerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeSoccer not implemented")
}
func (UnimplementedQuickSoccerServer) GetSoccerSettings(context.Context, *GetSoccerSettingsRequest) (*QuickSoccerAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoccerSettings not implemented")
}
func (UnimplementedQuickSoccerServer) UpdateSoccerSettings(context.Context, *QuickSoccerAdmin) (*UpdateSoccerSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSoccerSettings not implemented")
}

// UnsafeQuickSoccerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuickSoccerServer will
// result in compilation errors.
type UnsafeQuickSoccerServer interface {
	mustEmbedUnimplementedQuickSoccerServer()
}

func RegisterQuickSoccerServer(s grpc.ServiceRegistrar, srv QuickSoccerServer) {
	s.RegisterService(&QuickSoccer_ServiceDesc, srv)
}

func _QuickSoccer_PlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).PlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/PlaceBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).PlaceBet(ctx, req.(*Bet))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_GetMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).GetMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/GetMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).GetMatch(ctx, req.(*GetMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).UpdateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_AddTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).AddTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/AddTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).AddTeam(ctx, req.(*AddTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_GetBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).GetBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/GetBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).GetBets(ctx, req.(*GetBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_DeleteBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).DeleteBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/DeleteBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).DeleteBet(ctx, req.(*DeleteBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_AddLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).AddLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/AddLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).AddLeague(ctx, req.(*AddLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_UpdateBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).UpdateBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/UpdateBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).UpdateBet(ctx, req.(*UpdateBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/GetTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).GetTeams(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_GetMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).GetMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/GetMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).GetMatches(ctx, req.(*GetMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_AddOutcomes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOutcomesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).AddOutcomes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/AddOutcomes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).AddOutcomes(ctx, req.(*AddOutcomesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_GetLeagues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).GetLeagues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/GetLeagues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).GetLeagues(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_DeleteLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).DeleteLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/DeleteLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).DeleteLeague(ctx, req.(*DeleteLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_SubscribeSoccer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeSoccerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).SubscribeSoccer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/SubscribeSoccer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).SubscribeSoccer(ctx, req.(*SubscribeSoccerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_GetSoccerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoccerSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).GetSoccerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/GetSoccerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).GetSoccerSettings(ctx, req.(*GetSoccerSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickSoccer_UpdateSoccerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuickSoccerAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickSoccerServer).UpdateSoccerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuickSoccer/UpdateSoccerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickSoccerServer).UpdateSoccerSettings(ctx, req.(*QuickSoccerAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

// QuickSoccer_ServiceDesc is the grpc.ServiceDesc for QuickSoccer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuickSoccer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QuickSoccer",
	HandlerType: (*QuickSoccerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceBet",
			Handler:    _QuickSoccer_PlaceBet_Handler,
		},
		{
			MethodName: "GetMatch",
			Handler:    _QuickSoccer_GetMatch_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _QuickSoccer_UpdateTeam_Handler,
		},
		{
			MethodName: "AddTeam",
			Handler:    _QuickSoccer_AddTeam_Handler,
		},
		{
			MethodName: "GetBets",
			Handler:    _QuickSoccer_GetBets_Handler,
		},
		{
			MethodName: "DeleteBet",
			Handler:    _QuickSoccer_DeleteBet_Handler,
		},
		{
			MethodName: "AddLeague",
			Handler:    _QuickSoccer_AddLeague_Handler,
		},
		{
			MethodName: "UpdateBet",
			Handler:    _QuickSoccer_UpdateBet_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _QuickSoccer_GetTeams_Handler,
		},
		{
			MethodName: "GetMatches",
			Handler:    _QuickSoccer_GetMatches_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _QuickSoccer_DeleteTeam_Handler,
		},
		{
			MethodName: "AddOutcomes",
			Handler:    _QuickSoccer_AddOutcomes_Handler,
		},
		{
			MethodName: "GetLeagues",
			Handler:    _QuickSoccer_GetLeagues_Handler,
		},
		{
			MethodName: "DeleteLeague",
			Handler:    _QuickSoccer_DeleteLeague_Handler,
		},
		{
			MethodName: "SubscribeSoccer",
			Handler:    _QuickSoccer_SubscribeSoccer_Handler,
		},
		{
			MethodName: "GetSoccerSettings",
			Handler:    _QuickSoccer_GetSoccerSettings_Handler,
		},
		{
			MethodName: "UpdateSoccerSettings",
			Handler:    _QuickSoccer_UpdateSoccerSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quicksoccer.proto",
}
