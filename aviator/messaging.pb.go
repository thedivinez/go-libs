// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: messaging.proto

package aviator

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoundLeaderBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`              
	Stake      float64 `protobuf:"fixed64,2,opt,name=Stake,proto3" json:"stake"`          
	PayOut     float64 `protobuf:"fixed64,3,opt,name=PayOut,proto3" json:"payout"`        
	CashedOut  bool    `protobuf:"varint,4,opt,name=CashedOut,proto3" json:"cashedOut"`   
	Multiplier string  `protobuf:"bytes,5,opt,name=Multiplier,proto3" json:"multiplier"`  
}

func (x *RoundLeaderBoard) Reset() {
	*x = RoundLeaderBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundLeaderBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundLeaderBoard) ProtoMessage() {}

func (x *RoundLeaderBoard) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundLeaderBoard.ProtoReflect.Descriptor instead.
func (*RoundLeaderBoard) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{0}
}

func (x *RoundLeaderBoard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoundLeaderBoard) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *RoundLeaderBoard) GetPayOut() float64 {
	if x != nil {
		return x.PayOut
	}
	return 0
}

func (x *RoundLeaderBoard) GetCashedOut() bool {
	if x != nil {
		return x.CashedOut
	}
	return false
}

func (x *RoundLeaderBoard) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

type Round struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Risk        float64             `protobuf:"fixed64,1,opt,name=Risk,proto3" json:"risk" bson:"risk"`                
	State       string              `protobuf:"bytes,2,opt,name=State,proto3" json:"state" bson:"state"`                
	LeaderBoard []*RoundLeaderBoard `protobuf:"bytes,3,rep,name=LeaderBoard,proto3" json:"leaderBoard" bson:"-"`    
	ID          string              `protobuf:"bytes,4,opt,name=ID,proto3" json:"id,omitempty" bson:"_id"`                      
	TotalBets   int64               `protobuf:"varint,5,opt,name=TotalBets,proto3" json:"totalBets" bson:"totalBets"`       
	Multiplier  float64             `protobuf:"fixed64,6,opt,name=Multiplier,proto3" json:"multiplier" bson:"multiplier"`    
	DateCreated int64               `protobuf:"varint,7,opt,name=DateCreated,proto3" json:"dateCreated" bson:"dateCreated"`   
	ProfitBlown float64             `protobuf:"fixed64,8,opt,name=ProfitBlown,proto3" json:"profitBlown" bson:"profitBlown"`  
	OrgID       string              `protobuf:"bytes,9,opt,name=OrgID,proto3" json:"-" bson:"orgId"`                
}

func (x *Round) Reset() {
	*x = Round{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round) ProtoMessage() {}

func (x *Round) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round.ProtoReflect.Descriptor instead.
func (*Round) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{1}
}

func (x *Round) GetRisk() float64 {
	if x != nil {
		return x.Risk
	}
	return 0
}

func (x *Round) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Round) GetLeaderBoard() []*RoundLeaderBoard {
	if x != nil {
		return x.LeaderBoard
	}
	return nil
}

func (x *Round) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Round) GetTotalBets() int64 {
	if x != nil {
		return x.TotalBets
	}
	return 0
}

func (x *Round) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Round) GetDateCreated() int64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *Round) GetProfitBlown() float64 {
	if x != nil {
		return x.ProfitBlown
	}
	return 0
}

func (x *Round) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type RoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string              `protobuf:"bytes,1,opt,name=ID,proto3" json:"id"`                    
	State       string              `protobuf:"bytes,2,opt,name=State,proto3" json:"state"`              
	Multiplier  string              `protobuf:"bytes,3,opt,name=Multiplier,proto3" json:"multiplier"`    
	TotalBets   int64               `protobuf:"varint,4,opt,name=TotalBets,proto3" json:"totalBets"`     
	LeaderBoard []*RoundLeaderBoard `protobuf:"bytes,5,rep,name=LeaderBoard,proto3" json:"leaderBoard"`  
}

func (x *RoundState) Reset() {
	*x = RoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundState) ProtoMessage() {}

func (x *RoundState) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundState.ProtoReflect.Descriptor instead.
func (*RoundState) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{2}
}

func (x *RoundState) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RoundState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RoundState) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

func (x *RoundState) GetTotalBets() int64 {
	if x != nil {
		return x.TotalBets
	}
	return 0
}

func (x *RoundState) GetLeaderBoard() []*RoundLeaderBoard {
	if x != nil {
		return x.LeaderBoard
	}
	return nil
}

type RoundSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Financed           float64 `protobuf:"fixed64,1,opt,name=Financed,proto3" json:"financed" bson:"financed,omitempty"`                       
	AmountToRisk       float64 `protobuf:"fixed64,2,opt,name=AmountToRisk,proto3" json:"amountToRisk" bson:"amountToRisk,omitempty"`               
	MinDemoStake       float64 `protobuf:"fixed64,3,opt,name=MinDemoStake,proto3" json:"minDemoStake" bson:"minDemoStake,omitempty"`               
	MaxDemoStake       float64 `protobuf:"fixed64,4,opt,name=MaxDemoStake,proto3" json:"maxDemoStake" bson:"maxDemoStake,omitempty"`               
	MinTotalBets       int64   `protobuf:"varint,5,opt,name=MinTotalBets,proto3" json:"minTotalBets" bson:"minTotalBets,omitempty"`                
	MaxTotalBets       int64   `protobuf:"varint,6,opt,name=MaxTotalBets,proto3" json:"maxTotalBets" bson:"maxTotalBets,omitempty"`                
	ReservedBalance    float64 `protobuf:"fixed64,7,opt,name=ReservedBalance,proto3" json:"reservedBalance" bson:"reservedBalance,omitempty"`         
	AutoExplodeAfter   int64   `protobuf:"varint,8,opt,name=AutoExplodeAfter,proto3" json:"autoExplodeAfter" bson:"autoExplodeAfter,omitempty"`        
	MinDemoRiskAmount  float64 `protobuf:"fixed64,9,opt,name=MinDemoRiskAmount,proto3" json:"minDemoRiskAmount" bson:"minDemoRiskAmount,omitempty"`     
	MaxDemoRiskAmount  float64 `protobuf:"fixed64,10,opt,name=MaxDemoRiskAmount,proto3" json:"maxDemoRiskAmount" bson:"maxDemoRiskAmount,omitempty"`    
	MinRiskPercentage  float64 `protobuf:"fixed64,11,opt,name=MinRiskPercentage,proto3" json:"minRiskPercentage" bson:"minRiskPercentage,omitempty"`    
	MaxRiskPercentage  float64 `protobuf:"fixed64,12,opt,name=MaxRiskPercentage,proto3" json:"maxRiskPercentage" bson:"maxRiskPercentage,omitempty"`    
	MaxMultiplierShift float64 `protobuf:"fixed64,13,opt,name=MaxMultiplierShift,proto3" json:"maxMultiplierShift" bson:"maxMultiplierShift,omitempty"`  
	OrgID              string  `protobuf:"bytes,14,opt,name=OrgID,proto3" json:"-" bson:"orgId,omitempty"`                              
	LisenseExpiration  int64   `protobuf:"varint,15,opt,name=LisenseExpiration,proto3" json:"licenseExpiry" bson:"licenseExpiry,omitempty"`     
}

func (x *RoundSettings) Reset() {
	*x = RoundSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundSettings) ProtoMessage() {}

func (x *RoundSettings) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundSettings.ProtoReflect.Descriptor instead.
func (*RoundSettings) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{3}
}

func (x *RoundSettings) GetFinanced() float64 {
	if x != nil {
		return x.Financed
	}
	return 0
}

func (x *RoundSettings) GetAmountToRisk() float64 {
	if x != nil {
		return x.AmountToRisk
	}
	return 0
}

func (x *RoundSettings) GetMinDemoStake() float64 {
	if x != nil {
		return x.MinDemoStake
	}
	return 0
}

func (x *RoundSettings) GetMaxDemoStake() float64 {
	if x != nil {
		return x.MaxDemoStake
	}
	return 0
}

func (x *RoundSettings) GetMinTotalBets() int64 {
	if x != nil {
		return x.MinTotalBets
	}
	return 0
}

func (x *RoundSettings) GetMaxTotalBets() int64 {
	if x != nil {
		return x.MaxTotalBets
	}
	return 0
}

func (x *RoundSettings) GetReservedBalance() float64 {
	if x != nil {
		return x.ReservedBalance
	}
	return 0
}

func (x *RoundSettings) GetAutoExplodeAfter() int64 {
	if x != nil {
		return x.AutoExplodeAfter
	}
	return 0
}

func (x *RoundSettings) GetMinDemoRiskAmount() float64 {
	if x != nil {
		return x.MinDemoRiskAmount
	}
	return 0
}

func (x *RoundSettings) GetMaxDemoRiskAmount() float64 {
	if x != nil {
		return x.MaxDemoRiskAmount
	}
	return 0
}

func (x *RoundSettings) GetMinRiskPercentage() float64 {
	if x != nil {
		return x.MinRiskPercentage
	}
	return 0
}

func (x *RoundSettings) GetMaxRiskPercentage() float64 {
	if x != nil {
		return x.MaxRiskPercentage
	}
	return 0
}

func (x *RoundSettings) GetMaxMultiplierShift() float64 {
	if x != nil {
		return x.MaxMultiplierShift
	}
	return 0
}

func (x *RoundSettings) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RoundSettings) GetLisenseExpiration() int64 {
	if x != nil {
		return x.LisenseExpiration
	}
	return 0
}

type RoundBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetId       string  `protobuf:"bytes,1,opt,name=BetId,proto3" json:"id" bson:"_id"`                
	Side        string  `protobuf:"bytes,2,opt,name=Side,proto3" json:"side" bson:"side"`                  
	Payout      float64 `protobuf:"fixed64,3,opt,name=Payout,proto3" json:"payout" bson:"payout"`            
	OrgID       string  `protobuf:"bytes,4,opt,name=OrgID,proto3" json:"-" bson:"orgId,omitempty"`                
	Stake       float64 `protobuf:"fixed64,5,opt,name=Stake,proto3" json:"stake" bson:"stake,omitempty"`              
	UserID      string  `protobuf:"bytes,6,opt,name=UserID,proto3" json:"userId" bson:"userId,omitempty"`              
	Status      string  `protobuf:"bytes,7,opt,name=Status,proto3" json:"status" bson:"status,omitempty"`              
	Account     string  `protobuf:"bytes,8,opt,name=Account,proto3" json:"account" bson:"account,omitempty"`            
	RoundID     string  `protobuf:"bytes,9,opt,name=RoundID,proto3" json:"roundId" bson:"roundId,omitempty"`            
	DateCreated int64   `protobuf:"varint,10,opt,name=DateCreated,proto3" json:"dateCreated" bson:"dateCreated,omitempty"`  
}

func (x *RoundBet) Reset() {
	*x = RoundBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundBet) ProtoMessage() {}

func (x *RoundBet) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundBet.ProtoReflect.Descriptor instead.
func (*RoundBet) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{4}
}

func (x *RoundBet) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *RoundBet) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *RoundBet) GetPayout() float64 {
	if x != nil {
		return x.Payout
	}
	return 0
}

func (x *RoundBet) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RoundBet) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *RoundBet) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RoundBet) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RoundBet) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RoundBet) GetRoundID() string {
	if x != nil {
		return x.RoundID
	}
	return ""
}

func (x *RoundBet) GetDateCreated() int64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

type RoundCashoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`  
}

func (x *RoundCashoutResponse) Reset() {
	*x = RoundCashoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundCashoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundCashoutResponse) ProtoMessage() {}

func (x *RoundCashoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundCashoutResponse.ProtoReflect.Descriptor instead.
func (*RoundCashoutResponse) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{5}
}

func (x *RoundCashoutResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelRoundBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`  
}

func (x *CancelRoundBetResponse) Reset() {
	*x = CancelRoundBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRoundBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRoundBetResponse) ProtoMessage() {}

func (x *CancelRoundBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRoundBetResponse.ProtoReflect.Descriptor instead.
func (*CancelRoundBetResponse) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{6}
}

func (x *CancelRoundBetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PlaceRoundBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string    `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`  
	Bet     *RoundBet `protobuf:"bytes,2,opt,name=Bet,proto3" json:"bets"`          
}

func (x *PlaceRoundBetResponse) Reset() {
	*x = PlaceRoundBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceRoundBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceRoundBetResponse) ProtoMessage() {}

func (x *PlaceRoundBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceRoundBetResponse.ProtoReflect.Descriptor instead.
func (*PlaceRoundBetResponse) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{7}
}

func (x *PlaceRoundBetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PlaceRoundBetResponse) GetBet() *RoundBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

type GetRoundBetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"userId"`  
	Page   string `protobuf:"bytes,2,opt,name=Page,proto3" json:"page"`      
	Limit  int64  `protobuf:"varint,3,opt,name=Limit,proto3" json:"limit"`   
}

func (x *GetRoundBetsRequest) Reset() {
	*x = GetRoundBetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundBetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundBetsRequest) ProtoMessage() {}

func (x *GetRoundBetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundBetsRequest.ProtoReflect.Descriptor instead.
func (*GetRoundBetsRequest) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{8}
}

func (x *GetRoundBetsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetRoundBetsRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *GetRoundBetsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRoundBetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bets []*RoundBet `protobuf:"bytes,1,rep,name=Bets,proto3" json:"bets"`  
}

func (x *GetRoundBetsResponse) Reset() {
	*x = GetRoundBetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundBetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundBetsResponse) ProtoMessage() {}

func (x *GetRoundBetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundBetsResponse.ProtoReflect.Descriptor instead.
func (*GetRoundBetsResponse) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{9}
}

func (x *GetRoundBetsResponse) GetBets() []*RoundBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

type GetRoundHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []string `protobuf:"bytes,1,rep,name=History,proto3" json:"history"`  
}

func (x *GetRoundHistoryResponse) Reset() {
	*x = GetRoundHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundHistoryResponse) ProtoMessage() {}

func (x *GetRoundHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetRoundHistoryResponse) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{10}
}

func (x *GetRoundHistoryResponse) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Package  string `protobuf:"bytes,1,opt,name=Package,proto3" json:"package"`     
	Duration int64  `protobuf:"varint,2,opt,name=Duration,proto3" json:"duration"`  
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeRequest) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *SubscribeRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string         `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`    
	Settings *RoundSettings `protobuf:"bytes,2,opt,name=Settings,proto3" json:"settings"`  
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{12}
}

func (x *SubscribeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubscribeResponse) GetSettings() *RoundSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type GetRoundSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRoundSettingsRequest) Reset() {
	*x = GetRoundSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundSettingsRequest) ProtoMessage() {}

func (x *GetRoundSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetRoundSettingsRequest) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{13}
}

type UpdateRoundSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string         `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`    
	Settings *RoundSettings `protobuf:"bytes,2,opt,name=Settings,proto3" json:"settings"`  
}

func (x *UpdateRoundSettingsResponse) Reset() {
	*x = UpdateRoundSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoundSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoundSettingsResponse) ProtoMessage() {}

func (x *UpdateRoundSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoundSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateRoundSettingsResponse) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateRoundSettingsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateRoundSettingsResponse) GetSettings() *RoundSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type GetActiveBetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"userId"`  
}

func (x *GetActiveBetsRequest) Reset() {
	*x = GetActiveBetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveBetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveBetsRequest) ProtoMessage() {}

func (x *GetActiveBetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveBetsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveBetsRequest) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{15}
}

func (x *GetActiveBetsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetActiveBetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bets []*RoundBet `protobuf:"bytes,1,rep,name=Bets,proto3" json:"bets"`  
}

func (x *GetActiveBetsResponse) Reset() {
	*x = GetActiveBetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveBetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveBetsResponse) ProtoMessage() {}

func (x *GetActiveBetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveBetsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveBetsResponse) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{16}
}

func (x *GetActiveBetsResponse) GetBets() []*RoundBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

type GetRoundHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRoundHistoryRequest) Reset() {
	*x = GetRoundHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundHistoryRequest) ProtoMessage() {}

func (x *GetRoundHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetRoundHistoryRequest) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{17}
}

var File_messaging_proto protoreflect.FileDescriptor

var file_messaging_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x79, 0x4f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x50, 0x61, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x8e, 0x02, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x77, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x77,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x22,
	0xe1, 0x04, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x69, 0x73,
	0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6d, 0x6f,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x61, 0x78,
	0x44, 0x65, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x6e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41,
	0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x64, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x44, 0x65,
	0x6d, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6d, 0x6f,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x4d, 0x69, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4d, 0x61,
	0x78, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x4d, 0x61, 0x78,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x65, 0x6e, 0x73, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x4c, 0x69, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x15, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x03, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x65, 0x74, 0x52, 0x03, 0x42, 0x65, 0x74, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x42,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x42, 0x65, 0x74, 0x52, 0x04, 0x42, 0x65, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x48, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x63, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x04, 0x42, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x52, 0x04, 0x42, 0x65, 0x74, 0x73, 0x22, 0x18, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x9f, 0x04, 0x0a, 0x07, 0x41, 0x76, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x73, 0x68, 0x6f,
	0x75, 0x74, 0x12, 0x09, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x1a, 0x15, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x65, 0x74, 0x12, 0x09, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74,
	0x1a, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x11, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x12, 0x09,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x1a, 0x17, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65,
	0x74, 0x73, 0x12, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x65, 0x74, 0x73, 0x12, 0x15,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0e, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x64, 0x69, 0x76, 0x69, 0x6e, 0x65,
	0x7a, 0x2f, 0x67, 0x6f, 0x2d, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x61, 0x76, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_messaging_proto_rawDescOnce sync.Once
	file_messaging_proto_rawDescData = file_messaging_proto_rawDesc
)

func file_messaging_proto_rawDescGZIP() []byte {
	file_messaging_proto_rawDescOnce.Do(func() {
		file_messaging_proto_rawDescData = protoimpl.X.CompressGZIP(file_messaging_proto_rawDescData)
	})
	return file_messaging_proto_rawDescData
}

var file_messaging_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_messaging_proto_goTypes = []interface{}{
	(*RoundLeaderBoard)(nil),            // 0: RoundLeaderBoard
	(*Round)(nil),                       // 1: Round
	(*RoundState)(nil),                  // 2: RoundState
	(*RoundSettings)(nil),               // 3: RoundSettings
	(*RoundBet)(nil),                    // 4: RoundBet
	(*RoundCashoutResponse)(nil),        // 5: RoundCashoutResponse
	(*CancelRoundBetResponse)(nil),      // 6: CancelRoundBetResponse
	(*PlaceRoundBetResponse)(nil),       // 7: PlaceRoundBetResponse
	(*GetRoundBetsRequest)(nil),         // 8: GetRoundBetsRequest
	(*GetRoundBetsResponse)(nil),        // 9: GetRoundBetsResponse
	(*GetRoundHistoryResponse)(nil),     // 10: GetRoundHistoryResponse
	(*SubscribeRequest)(nil),            // 11: SubscribeRequest
	(*SubscribeResponse)(nil),           // 12: SubscribeResponse
	(*GetRoundSettingsRequest)(nil),     // 13: GetRoundSettingsRequest
	(*UpdateRoundSettingsResponse)(nil), // 14: UpdateRoundSettingsResponse
	(*GetActiveBetsRequest)(nil),        // 15: GetActiveBetsRequest
	(*GetActiveBetsResponse)(nil),       // 16: GetActiveBetsResponse
	(*GetRoundHistoryRequest)(nil),      // 17: GetRoundHistoryRequest
}
var file_messaging_proto_depIdxs = []int32{
	0,  // 0: Round.LeaderBoard:type_name -> RoundLeaderBoard
	0,  // 1: RoundState.LeaderBoard:type_name -> RoundLeaderBoard
	4,  // 2: PlaceRoundBetResponse.Bet:type_name -> RoundBet
	4,  // 3: GetRoundBetsResponse.Bets:type_name -> RoundBet
	3,  // 4: SubscribeResponse.Settings:type_name -> RoundSettings
	3,  // 5: UpdateRoundSettingsResponse.Settings:type_name -> RoundSettings
	4,  // 6: GetActiveBetsResponse.Bets:type_name -> RoundBet
	4,  // 7: Aviator.RoundCashout:input_type -> RoundBet
	4,  // 8: Aviator.PlaceRoundBet:input_type -> RoundBet
	11, // 9: Aviator.Subscribe:input_type -> SubscribeRequest
	4,  // 10: Aviator.CancelRoundBet:input_type -> RoundBet
	8,  // 11: Aviator.GetRoundBets:input_type -> GetRoundBetsRequest
	13, // 12: Aviator.GetRoundSettings:input_type -> GetRoundSettingsRequest
	15, // 13: Aviator.GetActiveBets:input_type -> GetActiveBetsRequest
	17, // 14: Aviator.GetRoundHistory:input_type -> GetRoundHistoryRequest
	3,  // 15: Aviator.UpdateRoundSettings:input_type -> RoundSettings
	5,  // 16: Aviator.RoundCashout:output_type -> RoundCashoutResponse
	7,  // 17: Aviator.PlaceRoundBet:output_type -> PlaceRoundBetResponse
	12, // 18: Aviator.Subscribe:output_type -> SubscribeResponse
	6,  // 19: Aviator.CancelRoundBet:output_type -> CancelRoundBetResponse
	9,  // 20: Aviator.GetRoundBets:output_type -> GetRoundBetsResponse
	3,  // 21: Aviator.GetRoundSettings:output_type -> RoundSettings
	16, // 22: Aviator.GetActiveBets:output_type -> GetActiveBetsResponse
	10, // 23: Aviator.GetRoundHistory:output_type -> GetRoundHistoryResponse
	14, // 24: Aviator.UpdateRoundSettings:output_type -> UpdateRoundSettingsResponse
	16, // [16:25] is the sub-list for method output_type
	7,  // [7:16] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_messaging_proto_init() }
func file_messaging_proto_init() {
	if File_messaging_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messaging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundLeaderBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundCashoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRoundBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceRoundBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundBetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundBetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoundSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveBetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveBetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messaging_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_messaging_proto_goTypes,
		DependencyIndexes: file_messaging_proto_depIdxs,
		MessageInfos:      file_messaging_proto_msgTypes,
	}.Build()
	File_messaging_proto = out.File
	file_messaging_proto_rawDesc = nil
	file_messaging_proto_goTypes = nil
	file_messaging_proto_depIdxs = nil
}
