// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: speedncash.proto

package speedncash

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RaceLeaderBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`              
	Stake      float64 `protobuf:"fixed64,2,opt,name=Stake,proto3" json:"stake"`          
	PayOut     float64 `protobuf:"fixed64,3,opt,name=PayOut,proto3" json:"payout"`        
	CashedOut  bool    `protobuf:"varint,4,opt,name=CashedOut,proto3" json:"cashedOut"`   
	Multiplier string  `protobuf:"bytes,5,opt,name=Multiplier,proto3" json:"multiplier"`  
}

func (x *RaceLeaderBoard) Reset() {
	*x = RaceLeaderBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceLeaderBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceLeaderBoard) ProtoMessage() {}

func (x *RaceLeaderBoard) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceLeaderBoard.ProtoReflect.Descriptor instead.
func (*RaceLeaderBoard) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{0}
}

func (x *RaceLeaderBoard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaceLeaderBoard) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *RaceLeaderBoard) GetPayOut() float64 {
	if x != nil {
		return x.PayOut
	}
	return 0
}

func (x *RaceLeaderBoard) GetCashedOut() bool {
	if x != nil {
		return x.CashedOut
	}
	return false
}

func (x *RaceLeaderBoard) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

type Race struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string             `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty" bson:"_id"`                     
	State       string             `protobuf:"bytes,2,opt,name=State,proto3" json:"state" bson:"state"`               
	OrgID       string             `protobuf:"bytes,3,opt,name=OrgID,proto3" json:"orgId,omitempty" bson:"orgId"`               
	LeaderBoard []*RaceLeaderBoard `protobuf:"bytes,4,rep,name=LeaderBoard,proto3" json:"leaderBoard" bson:"-"`   
	TotalBets   int64              `protobuf:"varint,5,opt,name=TotalBets,proto3" json:"totalBets" bson:"totalBets"`      
	Multiplier  float64            `protobuf:"fixed64,6,opt,name=Multiplier,proto3" json:"multiplier" bson:"multiplier"`   
	DateCreated int64              `protobuf:"varint,7,opt,name=DateCreated,proto3" json:"dateCreated" bson:"dateCreated"`  
	GoldState   string             `protobuf:"bytes,8,opt,name=GoldState,proto3" json:"goldState" bson:"goldState"`       
	BlueState   string             `protobuf:"bytes,9,opt,name=BlueState,proto3" json:"blueState" bson:"blueState"`       
}

func (x *Race) Reset() {
	*x = Race{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Race) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Race) ProtoMessage() {}

func (x *Race) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Race.ProtoReflect.Descriptor instead.
func (*Race) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{1}
}

func (x *Race) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Race) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Race) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Race) GetLeaderBoard() []*RaceLeaderBoard {
	if x != nil {
		return x.LeaderBoard
	}
	return nil
}

func (x *Race) GetTotalBets() int64 {
	if x != nil {
		return x.TotalBets
	}
	return 0
}

func (x *Race) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Race) GetDateCreated() int64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *Race) GetGoldState() string {
	if x != nil {
		return x.GoldState
	}
	return ""
}

func (x *Race) GetBlueState() string {
	if x != nil {
		return x.BlueState
	}
	return ""
}

type RaceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Financed           float64 `protobuf:"fixed64,1,opt,name=Financed,proto3" json:"financed" bson:"financed,omitempty"`                       
	AmountToRisk       float64 `protobuf:"fixed64,2,opt,name=AmountToRisk,proto3" json:"amountToRisk" bson:"amountToRisk,omitempty"`               
	MinDemoStake       float64 `protobuf:"fixed64,3,opt,name=MinDemoStake,proto3" json:"minDemoStake" bson:"minDemoStake,omitempty"`               
	MaxDemoStake       float64 `protobuf:"fixed64,4,opt,name=MaxDemoStake,proto3" json:"maxDemoStake" bson:"maxDemoStake,omitempty"`               
	MinTotalBets       int64   `protobuf:"varint,5,opt,name=MinTotalBets,proto3" json:"minTotalBets" bson:"minTotalBets,omitempty"`                
	MaxTotalBets       int64   `protobuf:"varint,6,opt,name=MaxTotalBets,proto3" json:"maxTotalBets" bson:"maxTotalBets,omitempty"`                
	ReservedBalance    float64 `protobuf:"fixed64,7,opt,name=ReservedBalance,proto3" json:"reservedBalance" bson:"reservedBalance,omitempty"`         
	AutoExplodeAfter   int64   `protobuf:"varint,8,opt,name=AutoExplodeAfter,proto3" json:"autoExplodeAfter" bson:"autoExplodeAfter,omitempty"`        
	MinDemoRiskAmount  float64 `protobuf:"fixed64,9,opt,name=MinDemoRiskAmount,proto3" json:"minDemoRiskAmount" bson:"minDemoRiskAmount,omitempty"`     
	MaxDemoRiskAmount  float64 `protobuf:"fixed64,10,opt,name=MaxDemoRiskAmount,proto3" json:"maxDemoRiskAmount" bson:"maxDemoRiskAmount,omitempty"`    
	MinRiskPercentage  float64 `protobuf:"fixed64,11,opt,name=MinRiskPercentage,proto3" json:"minRiskPercentage" bson:"minRiskPercentage,omitempty"`    
	MaxRiskPercentage  float64 `protobuf:"fixed64,12,opt,name=MaxRiskPercentage,proto3" json:"maxRiskPercentage" bson:"maxRiskPercentage,omitempty"`    
	MaxMultiplierShift float64 `protobuf:"fixed64,13,opt,name=MaxMultiplierShift,proto3" json:"maxMultiplierShift" bson:"maxMultiplierShift,omitempty"`  
	OrgID              string  `protobuf:"bytes,14,opt,name=OrgID,proto3" json:"orgId" bson:"orgId,omitempty"`                              
	LisenseExpiration  int64   `protobuf:"varint,15,opt,name=LisenseExpiration,proto3" json:"licenseExpiry" bson:"licenseExpiry,omitempty"`     
}

func (x *RaceSettings) Reset() {
	*x = RaceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceSettings) ProtoMessage() {}

func (x *RaceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceSettings.ProtoReflect.Descriptor instead.
func (*RaceSettings) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{2}
}

func (x *RaceSettings) GetFinanced() float64 {
	if x != nil {
		return x.Financed
	}
	return 0
}

func (x *RaceSettings) GetAmountToRisk() float64 {
	if x != nil {
		return x.AmountToRisk
	}
	return 0
}

func (x *RaceSettings) GetMinDemoStake() float64 {
	if x != nil {
		return x.MinDemoStake
	}
	return 0
}

func (x *RaceSettings) GetMaxDemoStake() float64 {
	if x != nil {
		return x.MaxDemoStake
	}
	return 0
}

func (x *RaceSettings) GetMinTotalBets() int64 {
	if x != nil {
		return x.MinTotalBets
	}
	return 0
}

func (x *RaceSettings) GetMaxTotalBets() int64 {
	if x != nil {
		return x.MaxTotalBets
	}
	return 0
}

func (x *RaceSettings) GetReservedBalance() float64 {
	if x != nil {
		return x.ReservedBalance
	}
	return 0
}

func (x *RaceSettings) GetAutoExplodeAfter() int64 {
	if x != nil {
		return x.AutoExplodeAfter
	}
	return 0
}

func (x *RaceSettings) GetMinDemoRiskAmount() float64 {
	if x != nil {
		return x.MinDemoRiskAmount
	}
	return 0
}

func (x *RaceSettings) GetMaxDemoRiskAmount() float64 {
	if x != nil {
		return x.MaxDemoRiskAmount
	}
	return 0
}

func (x *RaceSettings) GetMinRiskPercentage() float64 {
	if x != nil {
		return x.MinRiskPercentage
	}
	return 0
}

func (x *RaceSettings) GetMaxRiskPercentage() float64 {
	if x != nil {
		return x.MaxRiskPercentage
	}
	return 0
}

func (x *RaceSettings) GetMaxMultiplierShift() float64 {
	if x != nil {
		return x.MaxMultiplierShift
	}
	return 0
}

func (x *RaceSettings) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RaceSettings) GetLisenseExpiration() int64 {
	if x != nil {
		return x.LisenseExpiration
	}
	return 0
}

type RaceBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetId       string  `protobuf:"bytes,1,opt,name=BetId,proto3" json:"id" bson:"_id"`                
	Payout      float64 `protobuf:"fixed64,3,opt,name=Payout,proto3" json:"payout" bson:"payout"`            
	Prediction  string  `protobuf:"bytes,2,opt,name=Prediction,proto3" json:"prediction" bson:"prediction"`      
	OrgID       string  `protobuf:"bytes,4,opt,name=OrgID,proto3" json:"orgId" bson:"orgId,omitempty"`                
	Stake       float64 `protobuf:"fixed64,5,opt,name=Stake,proto3" json:"stake" bson:"stake,omitempty"`              
	UserID      string  `protobuf:"bytes,6,opt,name=UserID,proto3" json:"userId" bson:"userId,omitempty"`              
	Status      string  `protobuf:"bytes,7,opt,name=Status,proto3" json:"status" bson:"status,omitempty"`              
	Account     string  `protobuf:"bytes,8,opt,name=Account,proto3" json:"account" bson:"account,omitempty"`            
	RaceID      string  `protobuf:"bytes,9,opt,name=RaceID,proto3" json:"raceId" bson:"raceId,omitempty"`              
	DateCreated int64   `protobuf:"varint,10,opt,name=DateCreated,proto3" json:"dateCreated" bson:"dateCreated,omitempty"`  
}

func (x *RaceBet) Reset() {
	*x = RaceBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceBet) ProtoMessage() {}

func (x *RaceBet) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceBet.ProtoReflect.Descriptor instead.
func (*RaceBet) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{3}
}

func (x *RaceBet) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *RaceBet) GetPayout() float64 {
	if x != nil {
		return x.Payout
	}
	return 0
}

func (x *RaceBet) GetPrediction() string {
	if x != nil {
		return x.Prediction
	}
	return ""
}

func (x *RaceBet) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RaceBet) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *RaceBet) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RaceBet) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RaceBet) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RaceBet) GetRaceID() string {
	if x != nil {
		return x.RaceID
	}
	return ""
}

func (x *RaceBet) GetDateCreated() int64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

type RaceCashoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`  
}

func (x *RaceCashoutResponse) Reset() {
	*x = RaceCashoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceCashoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceCashoutResponse) ProtoMessage() {}

func (x *RaceCashoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceCashoutResponse.ProtoReflect.Descriptor instead.
func (*RaceCashoutResponse) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{4}
}

func (x *RaceCashoutResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelRaceBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`  
}

func (x *CancelRaceBetResponse) Reset() {
	*x = CancelRaceBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRaceBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRaceBetResponse) ProtoMessage() {}

func (x *CancelRaceBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRaceBetResponse.ProtoReflect.Descriptor instead.
func (*CancelRaceBetResponse) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{5}
}

func (x *CancelRaceBetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PlaceRaceBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`  
	Bet     *RaceBet `protobuf:"bytes,2,opt,name=Bet,proto3" json:"bets"`          
}

func (x *PlaceRaceBetResponse) Reset() {
	*x = PlaceRaceBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceRaceBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceRaceBetResponse) ProtoMessage() {}

func (x *PlaceRaceBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceRaceBetResponse.ProtoReflect.Descriptor instead.
func (*PlaceRaceBetResponse) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{6}
}

func (x *PlaceRaceBetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PlaceRaceBetResponse) GetBet() *RaceBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

type GetRaceBetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"userId"`  
	Page   string `protobuf:"bytes,2,opt,name=Page,proto3" json:"page"`      
	Limit  int64  `protobuf:"varint,3,opt,name=Limit,proto3" json:"limit"`   
}

func (x *GetRaceBetsRequest) Reset() {
	*x = GetRaceBetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaceBetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaceBetsRequest) ProtoMessage() {}

func (x *GetRaceBetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaceBetsRequest.ProtoReflect.Descriptor instead.
func (*GetRaceBetsRequest) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{7}
}

func (x *GetRaceBetsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetRaceBetsRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *GetRaceBetsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRaceBetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bets []*RaceBet `protobuf:"bytes,1,rep,name=Bets,proto3" json:"bets"`  
}

func (x *GetRaceBetsResponse) Reset() {
	*x = GetRaceBetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaceBetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaceBetsResponse) ProtoMessage() {}

func (x *GetRaceBetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaceBetsResponse.ProtoReflect.Descriptor instead.
func (*GetRaceBetsResponse) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{8}
}

func (x *GetRaceBetsResponse) GetBets() []*RaceBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    string `protobuf:"bytes,1,opt,name=OrgID,proto3" json:"orgId"`         
	Package  string `protobuf:"bytes,2,opt,name=Package,proto3" json:"package"`     
	Duration int64  `protobuf:"varint,3,opt,name=Duration,proto3" json:"duration"`  
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *SubscribeRequest) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *SubscribeRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`    
	Settings *RaceSettings `protobuf:"bytes,2,opt,name=Settings,proto3" json:"settings"`  
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubscribeResponse) GetSettings() *RaceSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type GetRaceSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string `protobuf:"bytes,1,opt,name=OrgID,proto3" json:"orgId"`  
}

func (x *GetRaceSettingsRequest) Reset() {
	*x = GetRaceSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaceSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaceSettingsRequest) ProtoMessage() {}

func (x *GetRaceSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaceSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetRaceSettingsRequest) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{11}
}

func (x *GetRaceSettingsRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type UpdateRaceSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`    
	Settings *RaceSettings `protobuf:"bytes,2,opt,name=Settings,proto3" json:"settings"`  
}

func (x *UpdateRaceSettingsResponse) Reset() {
	*x = UpdateRaceSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRaceSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRaceSettingsResponse) ProtoMessage() {}

func (x *UpdateRaceSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRaceSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateRaceSettingsResponse) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateRaceSettingsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateRaceSettingsResponse) GetSettings() *RaceSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type GetActiveRaceBetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"userId"`  
	OrgID  string `protobuf:"bytes,2,opt,name=OrgID,proto3" json:"orgId"`    
}

func (x *GetActiveRaceBetsRequest) Reset() {
	*x = GetActiveRaceBetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveRaceBetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveRaceBetsRequest) ProtoMessage() {}

func (x *GetActiveRaceBetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveRaceBetsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveRaceBetsRequest) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{13}
}

func (x *GetActiveRaceBetsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetActiveRaceBetsRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type GetActiveRaceBetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bets []*RaceBet `protobuf:"bytes,1,rep,name=Bets,proto3" json:"bets"`  
}

func (x *GetActiveRaceBetsResponse) Reset() {
	*x = GetActiveRaceBetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speedncash_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveRaceBetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveRaceBetsResponse) ProtoMessage() {}

func (x *GetActiveRaceBetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedncash_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveRaceBetsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveRaceBetsResponse) Descriptor() ([]byte, []int) {
	return file_speedncash_proto_rawDescGZIP(), []int{14}
}

func (x *GetActiveRaceBetsResponse) GetBets() []*RaceBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

var File_speedncash_proto protoreflect.FileDescriptor

var file_speedncash_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x70, 0x65, 0x65, 0x64, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x79, 0x4f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x50, 0x61, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x92, 0x02, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0b, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe0, 0x04, 0x0a, 0x0c,
	0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x22, 0x0a, 0x0c,
	0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6d, 0x6f, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x4d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x69, 0x73,
	0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4d,
	0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4d, 0x61, 0x78,
	0x44, 0x65, 0x6d, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x52, 0x69,
	0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x61, 0x78, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x52, 0x69, 0x73, 0x6b,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61,
	0x78, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4c, 0x69, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87,
	0x02, 0x0a, 0x07, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x52, 0x61, 0x63, 0x65,
	0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x14,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x61,
	0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x03, 0x42, 0x65, 0x74, 0x22, 0x56, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x42, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65,
	0x74, 0x52, 0x04, 0x42, 0x65, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x2e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x22, 0x61, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x39,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x42,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x61, 0x63, 0x65,
	0x42, 0x65, 0x74, 0x52, 0x04, 0x42, 0x65, 0x74, 0x73, 0x32, 0xd2, 0x03, 0x0a, 0x0a, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x0b, 0x52, 0x61, 0x63, 0x65,
	0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x12, 0x08, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65,
	0x74, 0x1a, 0x14, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x12, 0x08, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65,
	0x74, 0x1a, 0x15, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x11, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0d,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x12, 0x08, 0x2e,
	0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x73, 0x12, 0x13,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x17, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x65, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x63, 0x65,
	0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x0d, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x1b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2a,
	0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65,
	0x64, 0x69, 0x76, 0x69, 0x6e, 0x65, 0x7a, 0x2f, 0x67, 0x6f, 0x2d, 0x6c, 0x69, 0x62, 0x73, 0x2f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_speedncash_proto_rawDescOnce sync.Once
	file_speedncash_proto_rawDescData = file_speedncash_proto_rawDesc
)

func file_speedncash_proto_rawDescGZIP() []byte {
	file_speedncash_proto_rawDescOnce.Do(func() {
		file_speedncash_proto_rawDescData = protoimpl.X.CompressGZIP(file_speedncash_proto_rawDescData)
	})
	return file_speedncash_proto_rawDescData
}

var file_speedncash_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_speedncash_proto_goTypes = []interface{}{
	(*RaceLeaderBoard)(nil),            // 0: RaceLeaderBoard
	(*Race)(nil),                       // 1: Race
	(*RaceSettings)(nil),               // 2: RaceSettings
	(*RaceBet)(nil),                    // 3: RaceBet
	(*RaceCashoutResponse)(nil),        // 4: RaceCashoutResponse
	(*CancelRaceBetResponse)(nil),      // 5: CancelRaceBetResponse
	(*PlaceRaceBetResponse)(nil),       // 6: PlaceRaceBetResponse
	(*GetRaceBetsRequest)(nil),         // 7: GetRaceBetsRequest
	(*GetRaceBetsResponse)(nil),        // 8: GetRaceBetsResponse
	(*SubscribeRequest)(nil),           // 9: SubscribeRequest
	(*SubscribeResponse)(nil),          // 10: SubscribeResponse
	(*GetRaceSettingsRequest)(nil),     // 11: GetRaceSettingsRequest
	(*UpdateRaceSettingsResponse)(nil), // 12: UpdateRaceSettingsResponse
	(*GetActiveRaceBetsRequest)(nil),   // 13: GetActiveRaceBetsRequest
	(*GetActiveRaceBetsResponse)(nil),  // 14: GetActiveRaceBetsResponse
}
var file_speedncash_proto_depIdxs = []int32{
	0,  // 0: Race.LeaderBoard:type_name -> RaceLeaderBoard
	3,  // 1: PlaceRaceBetResponse.Bet:type_name -> RaceBet
	3,  // 2: GetRaceBetsResponse.Bets:type_name -> RaceBet
	2,  // 3: SubscribeResponse.Settings:type_name -> RaceSettings
	2,  // 4: UpdateRaceSettingsResponse.Settings:type_name -> RaceSettings
	3,  // 5: GetActiveRaceBetsResponse.Bets:type_name -> RaceBet
	3,  // 6: SpeedNCash.RaceCashout:input_type -> RaceBet
	3,  // 7: SpeedNCash.PlaceRaceBet:input_type -> RaceBet
	9,  // 8: SpeedNCash.Subscribe:input_type -> SubscribeRequest
	3,  // 9: SpeedNCash.CancelRaceBet:input_type -> RaceBet
	7,  // 10: SpeedNCash.GetRaceBets:input_type -> GetRaceBetsRequest
	11, // 11: SpeedNCash.GetRaceSettings:input_type -> GetRaceSettingsRequest
	13, // 12: SpeedNCash.GetActiveBets:input_type -> GetActiveRaceBetsRequest
	2,  // 13: SpeedNCash.UpdateRaceSettings:input_type -> RaceSettings
	4,  // 14: SpeedNCash.RaceCashout:output_type -> RaceCashoutResponse
	6,  // 15: SpeedNCash.PlaceRaceBet:output_type -> PlaceRaceBetResponse
	10, // 16: SpeedNCash.Subscribe:output_type -> SubscribeResponse
	5,  // 17: SpeedNCash.CancelRaceBet:output_type -> CancelRaceBetResponse
	8,  // 18: SpeedNCash.GetRaceBets:output_type -> GetRaceBetsResponse
	2,  // 19: SpeedNCash.GetRaceSettings:output_type -> RaceSettings
	14, // 20: SpeedNCash.GetActiveBets:output_type -> GetActiveRaceBetsResponse
	12, // 21: SpeedNCash.UpdateRaceSettings:output_type -> UpdateRaceSettingsResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_speedncash_proto_init() }
func file_speedncash_proto_init() {
	if File_speedncash_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speedncash_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceLeaderBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Race); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceCashoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRaceBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceRaceBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaceBetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaceBetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaceSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRaceSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveRaceBetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speedncash_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveRaceBetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speedncash_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speedncash_proto_goTypes,
		DependencyIndexes: file_speedncash_proto_depIdxs,
		MessageInfos:      file_speedncash_proto_msgTypes,
	}.Build()
	File_speedncash_proto = out.File
	file_speedncash_proto_rawDesc = nil
	file_speedncash_proto_goTypes = nil
	file_speedncash_proto_depIdxs = nil
}
