// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: messaging.proto

package speedncash

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpeedNCashClient is the client API for SpeedNCash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeedNCashClient interface {
	RaceCashout(ctx context.Context, in *RaceBet, opts ...grpc.CallOption) (*RaceCashoutResponse, error)
	PlaceRaceBet(ctx context.Context, in *RaceBet, opts ...grpc.CallOption) (*PlaceRaceBetResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	CancelRaceBet(ctx context.Context, in *RaceBet, opts ...grpc.CallOption) (*CancelRaceBetResponse, error)
	GetRaceBets(ctx context.Context, in *GetRaceBetsRequest, opts ...grpc.CallOption) (*GetRaceBetsResponse, error)
	GetRaceSettings(ctx context.Context, in *GetRaceSettingsRequest, opts ...grpc.CallOption) (*RaceSettings, error)
	GetActiveBets(ctx context.Context, in *GetActiveBetsRequest, opts ...grpc.CallOption) (*GetActiveBetsResponse, error)
	UpdateRaceSettings(ctx context.Context, in *RaceSettings, opts ...grpc.CallOption) (*UpdateRaceSettingsResponse, error)
}

type speedNCashClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeedNCashClient(cc grpc.ClientConnInterface) SpeedNCashClient {
	return &speedNCashClient{cc}
}

func (c *speedNCashClient) RaceCashout(ctx context.Context, in *RaceBet, opts ...grpc.CallOption) (*RaceCashoutResponse, error) {
	out := new(RaceCashoutResponse)
	err := c.cc.Invoke(ctx, "/SpeedNCash/RaceCashout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedNCashClient) PlaceRaceBet(ctx context.Context, in *RaceBet, opts ...grpc.CallOption) (*PlaceRaceBetResponse, error) {
	out := new(PlaceRaceBetResponse)
	err := c.cc.Invoke(ctx, "/SpeedNCash/PlaceRaceBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedNCashClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/SpeedNCash/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedNCashClient) CancelRaceBet(ctx context.Context, in *RaceBet, opts ...grpc.CallOption) (*CancelRaceBetResponse, error) {
	out := new(CancelRaceBetResponse)
	err := c.cc.Invoke(ctx, "/SpeedNCash/CancelRaceBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedNCashClient) GetRaceBets(ctx context.Context, in *GetRaceBetsRequest, opts ...grpc.CallOption) (*GetRaceBetsResponse, error) {
	out := new(GetRaceBetsResponse)
	err := c.cc.Invoke(ctx, "/SpeedNCash/GetRaceBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedNCashClient) GetRaceSettings(ctx context.Context, in *GetRaceSettingsRequest, opts ...grpc.CallOption) (*RaceSettings, error) {
	out := new(RaceSettings)
	err := c.cc.Invoke(ctx, "/SpeedNCash/GetRaceSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedNCashClient) GetActiveBets(ctx context.Context, in *GetActiveBetsRequest, opts ...grpc.CallOption) (*GetActiveBetsResponse, error) {
	out := new(GetActiveBetsResponse)
	err := c.cc.Invoke(ctx, "/SpeedNCash/GetActiveBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedNCashClient) UpdateRaceSettings(ctx context.Context, in *RaceSettings, opts ...grpc.CallOption) (*UpdateRaceSettingsResponse, error) {
	out := new(UpdateRaceSettingsResponse)
	err := c.cc.Invoke(ctx, "/SpeedNCash/UpdateRaceSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeedNCashServer is the server API for SpeedNCash service.
// All implementations should embed UnimplementedSpeedNCashServer
// for forward compatibility
type SpeedNCashServer interface {
	RaceCashout(context.Context, *RaceBet) (*RaceCashoutResponse, error)
	PlaceRaceBet(context.Context, *RaceBet) (*PlaceRaceBetResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	CancelRaceBet(context.Context, *RaceBet) (*CancelRaceBetResponse, error)
	GetRaceBets(context.Context, *GetRaceBetsRequest) (*GetRaceBetsResponse, error)
	GetRaceSettings(context.Context, *GetRaceSettingsRequest) (*RaceSettings, error)
	GetActiveBets(context.Context, *GetActiveBetsRequest) (*GetActiveBetsResponse, error)
	UpdateRaceSettings(context.Context, *RaceSettings) (*UpdateRaceSettingsResponse, error)
}

// UnimplementedSpeedNCashServer should be embedded to have forward compatible implementations.
type UnimplementedSpeedNCashServer struct {
}

func (UnimplementedSpeedNCashServer) RaceCashout(context.Context, *RaceBet) (*RaceCashoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaceCashout not implemented")
}
func (UnimplementedSpeedNCashServer) PlaceRaceBet(context.Context, *RaceBet) (*PlaceRaceBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceRaceBet not implemented")
}
func (UnimplementedSpeedNCashServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSpeedNCashServer) CancelRaceBet(context.Context, *RaceBet) (*CancelRaceBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRaceBet not implemented")
}
func (UnimplementedSpeedNCashServer) GetRaceBets(context.Context, *GetRaceBetsRequest) (*GetRaceBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaceBets not implemented")
}
func (UnimplementedSpeedNCashServer) GetRaceSettings(context.Context, *GetRaceSettingsRequest) (*RaceSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaceSettings not implemented")
}
func (UnimplementedSpeedNCashServer) GetActiveBets(context.Context, *GetActiveBetsRequest) (*GetActiveBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveBets not implemented")
}
func (UnimplementedSpeedNCashServer) UpdateRaceSettings(context.Context, *RaceSettings) (*UpdateRaceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRaceSettings not implemented")
}

// UnsafeSpeedNCashServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeedNCashServer will
// result in compilation errors.
type UnsafeSpeedNCashServer interface {
	mustEmbedUnimplementedSpeedNCashServer()
}

func RegisterSpeedNCashServer(s grpc.ServiceRegistrar, srv SpeedNCashServer) {
	s.RegisterService(&SpeedNCash_ServiceDesc, srv)
}

func _SpeedNCash_RaceCashout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaceBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedNCashServer).RaceCashout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpeedNCash/RaceCashout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedNCashServer).RaceCashout(ctx, req.(*RaceBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedNCash_PlaceRaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaceBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedNCashServer).PlaceRaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpeedNCash/PlaceRaceBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedNCashServer).PlaceRaceBet(ctx, req.(*RaceBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedNCash_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedNCashServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpeedNCash/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedNCashServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedNCash_CancelRaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaceBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedNCashServer).CancelRaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpeedNCash/CancelRaceBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedNCashServer).CancelRaceBet(ctx, req.(*RaceBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedNCash_GetRaceBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaceBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedNCashServer).GetRaceBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpeedNCash/GetRaceBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedNCashServer).GetRaceBets(ctx, req.(*GetRaceBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedNCash_GetRaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedNCashServer).GetRaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpeedNCash/GetRaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedNCashServer).GetRaceSettings(ctx, req.(*GetRaceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedNCash_GetActiveBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedNCashServer).GetActiveBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpeedNCash/GetActiveBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedNCashServer).GetActiveBets(ctx, req.(*GetActiveBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedNCash_UpdateRaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaceSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedNCashServer).UpdateRaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpeedNCash/UpdateRaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedNCashServer).UpdateRaceSettings(ctx, req.(*RaceSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeedNCash_ServiceDesc is the grpc.ServiceDesc for SpeedNCash service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeedNCash_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SpeedNCash",
	HandlerType: (*SpeedNCashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RaceCashout",
			Handler:    _SpeedNCash_RaceCashout_Handler,
		},
		{
			MethodName: "PlaceRaceBet",
			Handler:    _SpeedNCash_PlaceRaceBet_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _SpeedNCash_Subscribe_Handler,
		},
		{
			MethodName: "CancelRaceBet",
			Handler:    _SpeedNCash_CancelRaceBet_Handler,
		},
		{
			MethodName: "GetRaceBets",
			Handler:    _SpeedNCash_GetRaceBets_Handler,
		},
		{
			MethodName: "GetRaceSettings",
			Handler:    _SpeedNCash_GetRaceSettings_Handler,
		},
		{
			MethodName: "GetActiveBets",
			Handler:    _SpeedNCash_GetActiveBets_Handler,
		},
		{
			MethodName: "UpdateRaceSettings",
			Handler:    _SpeedNCash_UpdateRaceSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messaging.proto",
}
