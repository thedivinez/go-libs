// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: messaging.proto

package aviator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AviatorClient is the client API for Aviator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AviatorClient interface {
	PlaneCashout(ctx context.Context, in *RoundBet, opts ...grpc.CallOption) (*PlaneCashoutResponse, error)
	PlaceRoundBet(ctx context.Context, in *RoundBet, opts ...grpc.CallOption) (*PlaceRoundBetResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	CancelRoundBet(ctx context.Context, in *RoundBet, opts ...grpc.CallOption) (*CancelRoundBetResponse, error)
	GetRoundBets(ctx context.Context, in *GetRoundBetsRequest, opts ...grpc.CallOption) (*GetRoundBetsResponse, error)
	GetPlaneSettings(ctx context.Context, in *GetPlaneSettingsRequest, opts ...grpc.CallOption) (*PlaneSettings, error)
	GetActiveBets(ctx context.Context, in *GetActiveBetsRequest, opts ...grpc.CallOption) (*GetActiveBetsResponse, error)
	GetPlaneHistory(ctx context.Context, in *GetPlaneHistoryRequest, opts ...grpc.CallOption) (*GetPlaneHistoryResponse, error)
	UpdatePlaneSettings(ctx context.Context, in *PlaneSettings, opts ...grpc.CallOption) (*UpdatePlaneSettingsResponse, error)
}

type aviatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAviatorClient(cc grpc.ClientConnInterface) AviatorClient {
	return &aviatorClient{cc}
}

func (c *aviatorClient) PlaneCashout(ctx context.Context, in *RoundBet, opts ...grpc.CallOption) (*PlaneCashoutResponse, error) {
	out := new(PlaneCashoutResponse)
	err := c.cc.Invoke(ctx, "/Aviator/PlaneCashout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) PlaceRoundBet(ctx context.Context, in *RoundBet, opts ...grpc.CallOption) (*PlaceRoundBetResponse, error) {
	out := new(PlaceRoundBetResponse)
	err := c.cc.Invoke(ctx, "/Aviator/PlaceRoundBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/Aviator/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) CancelRoundBet(ctx context.Context, in *RoundBet, opts ...grpc.CallOption) (*CancelRoundBetResponse, error) {
	out := new(CancelRoundBetResponse)
	err := c.cc.Invoke(ctx, "/Aviator/CancelRoundBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) GetRoundBets(ctx context.Context, in *GetRoundBetsRequest, opts ...grpc.CallOption) (*GetRoundBetsResponse, error) {
	out := new(GetRoundBetsResponse)
	err := c.cc.Invoke(ctx, "/Aviator/GetRoundBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) GetPlaneSettings(ctx context.Context, in *GetPlaneSettingsRequest, opts ...grpc.CallOption) (*PlaneSettings, error) {
	out := new(PlaneSettings)
	err := c.cc.Invoke(ctx, "/Aviator/GetPlaneSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) GetActiveBets(ctx context.Context, in *GetActiveBetsRequest, opts ...grpc.CallOption) (*GetActiveBetsResponse, error) {
	out := new(GetActiveBetsResponse)
	err := c.cc.Invoke(ctx, "/Aviator/GetActiveBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) GetPlaneHistory(ctx context.Context, in *GetPlaneHistoryRequest, opts ...grpc.CallOption) (*GetPlaneHistoryResponse, error) {
	out := new(GetPlaneHistoryResponse)
	err := c.cc.Invoke(ctx, "/Aviator/GetPlaneHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) UpdatePlaneSettings(ctx context.Context, in *PlaneSettings, opts ...grpc.CallOption) (*UpdatePlaneSettingsResponse, error) {
	out := new(UpdatePlaneSettingsResponse)
	err := c.cc.Invoke(ctx, "/Aviator/UpdatePlaneSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AviatorServer is the server API for Aviator service.
// All implementations should embed UnimplementedAviatorServer
// for forward compatibility
type AviatorServer interface {
	PlaneCashout(context.Context, *RoundBet) (*PlaneCashoutResponse, error)
	PlaceRoundBet(context.Context, *RoundBet) (*PlaceRoundBetResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	CancelRoundBet(context.Context, *RoundBet) (*CancelRoundBetResponse, error)
	GetRoundBets(context.Context, *GetRoundBetsRequest) (*GetRoundBetsResponse, error)
	GetPlaneSettings(context.Context, *GetPlaneSettingsRequest) (*PlaneSettings, error)
	GetActiveBets(context.Context, *GetActiveBetsRequest) (*GetActiveBetsResponse, error)
	GetPlaneHistory(context.Context, *GetPlaneHistoryRequest) (*GetPlaneHistoryResponse, error)
	UpdatePlaneSettings(context.Context, *PlaneSettings) (*UpdatePlaneSettingsResponse, error)
}

// UnimplementedAviatorServer should be embedded to have forward compatible implementations.
type UnimplementedAviatorServer struct {
}

func (UnimplementedAviatorServer) PlaneCashout(context.Context, *RoundBet) (*PlaneCashoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaneCashout not implemented")
}
func (UnimplementedAviatorServer) PlaceRoundBet(context.Context, *RoundBet) (*PlaceRoundBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceRoundBet not implemented")
}
func (UnimplementedAviatorServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAviatorServer) CancelRoundBet(context.Context, *RoundBet) (*CancelRoundBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRoundBet not implemented")
}
func (UnimplementedAviatorServer) GetRoundBets(context.Context, *GetRoundBetsRequest) (*GetRoundBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundBets not implemented")
}
func (UnimplementedAviatorServer) GetPlaneSettings(context.Context, *GetPlaneSettingsRequest) (*PlaneSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaneSettings not implemented")
}
func (UnimplementedAviatorServer) GetActiveBets(context.Context, *GetActiveBetsRequest) (*GetActiveBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveBets not implemented")
}
func (UnimplementedAviatorServer) GetPlaneHistory(context.Context, *GetPlaneHistoryRequest) (*GetPlaneHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaneHistory not implemented")
}
func (UnimplementedAviatorServer) UpdatePlaneSettings(context.Context, *PlaneSettings) (*UpdatePlaneSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaneSettings not implemented")
}

// UnsafeAviatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AviatorServer will
// result in compilation errors.
type UnsafeAviatorServer interface {
	mustEmbedUnimplementedAviatorServer()
}

func RegisterAviatorServer(s grpc.ServiceRegistrar, srv AviatorServer) {
	s.RegisterService(&Aviator_ServiceDesc, srv)
}

func _Aviator_PlaneCashout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).PlaneCashout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/PlaneCashout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).PlaneCashout(ctx, req.(*RoundBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_PlaceRoundBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).PlaceRoundBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/PlaceRoundBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).PlaceRoundBet(ctx, req.(*RoundBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_CancelRoundBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).CancelRoundBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/CancelRoundBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).CancelRoundBet(ctx, req.(*RoundBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_GetRoundBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).GetRoundBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/GetRoundBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).GetRoundBets(ctx, req.(*GetRoundBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_GetPlaneSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaneSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).GetPlaneSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/GetPlaneSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).GetPlaneSettings(ctx, req.(*GetPlaneSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_GetActiveBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).GetActiveBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/GetActiveBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).GetActiveBets(ctx, req.(*GetActiveBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_GetPlaneHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaneHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).GetPlaneHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/GetPlaneHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).GetPlaneHistory(ctx, req.(*GetPlaneHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_UpdatePlaneSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).UpdatePlaneSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aviator/UpdatePlaneSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).UpdatePlaneSettings(ctx, req.(*PlaneSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// Aviator_ServiceDesc is the grpc.ServiceDesc for Aviator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aviator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Aviator",
	HandlerType: (*AviatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaneCashout",
			Handler:    _Aviator_PlaneCashout_Handler,
		},
		{
			MethodName: "PlaceRoundBet",
			Handler:    _Aviator_PlaceRoundBet_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Aviator_Subscribe_Handler,
		},
		{
			MethodName: "CancelRoundBet",
			Handler:    _Aviator_CancelRoundBet_Handler,
		},
		{
			MethodName: "GetRoundBets",
			Handler:    _Aviator_GetRoundBets_Handler,
		},
		{
			MethodName: "GetPlaneSettings",
			Handler:    _Aviator_GetPlaneSettings_Handler,
		},
		{
			MethodName: "GetActiveBets",
			Handler:    _Aviator_GetActiveBets_Handler,
		},
		{
			MethodName: "GetPlaneHistory",
			Handler:    _Aviator_GetPlaneHistory_Handler,
		},
		{
			MethodName: "UpdatePlaneSettings",
			Handler:    _Aviator_UpdatePlaneSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messaging.proto",
}
