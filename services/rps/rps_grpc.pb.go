// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: rps.proto

package rps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RockPaperScissorsClient is the client API for RockPaperScissors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RockPaperScissorsClient interface {
	PlaceBet(ctx context.Context, in *Bet, opts ...grpc.CallOption) (*BetUpdateResponse, error)
	GetRound(ctx context.Context, in *GetRoundRequest, opts ...grpc.CallOption) (*Round, error)
	GetBets(ctx context.Context, in *GetBetsRequest, opts ...grpc.CallOption) (*GetBetsResponse, error)
	UpdateBet(ctx context.Context, in *UpdateBetRequest, opts ...grpc.CallOption) (*BetUpdateResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*RockPaperScissorsAdmin, error)
	UpdateRpsSettings(ctx context.Context, in *RockPaperScissorsAdmin, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
}

type rockPaperScissorsClient struct {
	cc grpc.ClientConnInterface
}

func NewRockPaperScissorsClient(cc grpc.ClientConnInterface) RockPaperScissorsClient {
	return &rockPaperScissorsClient{cc}
}

func (c *rockPaperScissorsClient) PlaceBet(ctx context.Context, in *Bet, opts ...grpc.CallOption) (*BetUpdateResponse, error) {
	out := new(BetUpdateResponse)
	err := c.cc.Invoke(ctx, "/RockPaperScissors/PlaceBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockPaperScissorsClient) GetRound(ctx context.Context, in *GetRoundRequest, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/RockPaperScissors/GetRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockPaperScissorsClient) GetBets(ctx context.Context, in *GetBetsRequest, opts ...grpc.CallOption) (*GetBetsResponse, error) {
	out := new(GetBetsResponse)
	err := c.cc.Invoke(ctx, "/RockPaperScissors/GetBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockPaperScissorsClient) UpdateBet(ctx context.Context, in *UpdateBetRequest, opts ...grpc.CallOption) (*BetUpdateResponse, error) {
	out := new(BetUpdateResponse)
	err := c.cc.Invoke(ctx, "/RockPaperScissors/UpdateBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockPaperScissorsClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/RockPaperScissors/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockPaperScissorsClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*RockPaperScissorsAdmin, error) {
	out := new(RockPaperScissorsAdmin)
	err := c.cc.Invoke(ctx, "/RockPaperScissors/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockPaperScissorsClient) UpdateRpsSettings(ctx context.Context, in *RockPaperScissorsAdmin, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, "/RockPaperScissors/UpdateRpsSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RockPaperScissorsServer is the server API for RockPaperScissors service.
// All implementations should embed UnimplementedRockPaperScissorsServer
// for forward compatibility
type RockPaperScissorsServer interface {
	PlaceBet(context.Context, *Bet) (*BetUpdateResponse, error)
	GetRound(context.Context, *GetRoundRequest) (*Round, error)
	GetBets(context.Context, *GetBetsRequest) (*GetBetsResponse, error)
	UpdateBet(context.Context, *UpdateBetRequest) (*BetUpdateResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	GetSettings(context.Context, *GetSettingsRequest) (*RockPaperScissorsAdmin, error)
	UpdateRpsSettings(context.Context, *RockPaperScissorsAdmin) (*UpdateSettingsResponse, error)
}

// UnimplementedRockPaperScissorsServer should be embedded to have forward compatible implementations.
type UnimplementedRockPaperScissorsServer struct {
}

func (UnimplementedRockPaperScissorsServer) PlaceBet(context.Context, *Bet) (*BetUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBet not implemented")
}
func (UnimplementedRockPaperScissorsServer) GetRound(context.Context, *GetRoundRequest) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRound not implemented")
}
func (UnimplementedRockPaperScissorsServer) GetBets(context.Context, *GetBetsRequest) (*GetBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBets not implemented")
}
func (UnimplementedRockPaperScissorsServer) UpdateBet(context.Context, *UpdateBetRequest) (*BetUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBet not implemented")
}
func (UnimplementedRockPaperScissorsServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRockPaperScissorsServer) GetSettings(context.Context, *GetSettingsRequest) (*RockPaperScissorsAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedRockPaperScissorsServer) UpdateRpsSettings(context.Context, *RockPaperScissorsAdmin) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRpsSettings not implemented")
}

// UnsafeRockPaperScissorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RockPaperScissorsServer will
// result in compilation errors.
type UnsafeRockPaperScissorsServer interface {
	mustEmbedUnimplementedRockPaperScissorsServer()
}

func RegisterRockPaperScissorsServer(s grpc.ServiceRegistrar, srv RockPaperScissorsServer) {
	s.RegisterService(&RockPaperScissors_ServiceDesc, srv)
}

func _RockPaperScissors_PlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServer).PlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RockPaperScissors/PlaceBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServer).PlaceBet(ctx, req.(*Bet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockPaperScissors_GetRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServer).GetRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RockPaperScissors/GetRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServer).GetRound(ctx, req.(*GetRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockPaperScissors_GetBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServer).GetBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RockPaperScissors/GetBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServer).GetBets(ctx, req.(*GetBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockPaperScissors_UpdateBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServer).UpdateBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RockPaperScissors/UpdateBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServer).UpdateBet(ctx, req.(*UpdateBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockPaperScissors_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RockPaperScissors/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockPaperScissors_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RockPaperScissors/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockPaperScissors_UpdateRpsSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RockPaperScissorsAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServer).UpdateRpsSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RockPaperScissors/UpdateRpsSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServer).UpdateRpsSettings(ctx, req.(*RockPaperScissorsAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

// RockPaperScissors_ServiceDesc is the grpc.ServiceDesc for RockPaperScissors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RockPaperScissors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RockPaperScissors",
	HandlerType: (*RockPaperScissorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceBet",
			Handler:    _RockPaperScissors_PlaceBet_Handler,
		},
		{
			MethodName: "GetRound",
			Handler:    _RockPaperScissors_GetRound_Handler,
		},
		{
			MethodName: "GetBets",
			Handler:    _RockPaperScissors_GetBets_Handler,
		},
		{
			MethodName: "UpdateBet",
			Handler:    _RockPaperScissors_UpdateBet_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _RockPaperScissors_Subscribe_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _RockPaperScissors_GetSettings_Handler,
		},
		{
			MethodName: "UpdateRpsSettings",
			Handler:    _RockPaperScissors_UpdateRpsSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rps.proto",
}
